# -*- coding: utf-8 -*-
"""PythonRevision.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FrvWPxvBDV5aWP-Vj41LWm3ky1sP2LTS

Q1- Write a program to check whether given number is prime or not. .


> Indented block
"""

import math

def isPrime(num):
    if num < 2:
        return(False)
    for i in range(2, int(math.sqrt(num))+1):
        if num % i == 0:
            return(False)
    return(True)

inputs = range(1, 200)
expeted_output = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]
output = []
for num in inputs:
    if isPrime(num): 
        output.append(num)
        print(num, end="\t")
print()

assert expeted_output == output
print(expeted_output)
print(output)

"""Q2- Write a program to print prime numbers in a given range. Ex: [5,70]

"""

def primesInRange(start, end):
    lst = []
    for num in range(start, end):
        if (isPrime(num)):
            lst.append(num)
    return(lst)

start = 7
end = 200
expeted_output = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]
output = primesInRange(start, end)

assert expeted_output == output
print(expeted_output)
print(output)

"""Q3- Write a program to calculate average value of a given list. Ex: lst = [2,10,45,7,9] -> 14.6"""

def ave(lst):
    sum = 0
    for i in lst:
        sum += i
    length = len(lst)
    return(sum/length)

inputs = [ [3, 6, 9] , [1, 2, 3] , [6, 7, 8], [2,10,45,7,9], [5]]
expeted_output = [6, 2, 7, 14.6, 5]
output = []
for lst in inputs:
    output.append(ave(lst))

assert expeted_output == output
print(expeted_output)
print(output)

"""Q4- Write a program to calculate the power without using POW function (using a for loop).

"""

def power(a, b):
    res = 1
    for i in range(b):
        res = res * a
    return(res)

inputs = [ (2, 3), (4, 2), (3, 2)]
expeted_output = [8, 16, 9]
output = []
for input in inputs:
    output.append(power(input[0], input[1]))

assert expeted_output == output
print(expeted_output)
print(output)

"""Q5- Write a program to check whether a number is binary or not."""

def isBinaryString(numString):
    for c in numString:
        if c not in ['0', '1']:
            return(False)
    return (True)

inputs = [ '234', '11010', 'abd', '1abd']
expeted_output = [False, True, False, False]
output = []
for input in inputs:
    output.append(isBinaryString(input))


assert expeted_output == output
print(expeted_output)
print(output)

"""Q6- Write a program to remove given character from a string. Ex: â€˜câ€™"""

def removeChar(st, c):
    ret_st = ''
    for i in st:
        if i != c:
            ret_st = ret_st + i
    return(ret_st)

inputs = [ ('Hello', 'l'), ('11010', 't'), ('abd', 'd')]
expeted_output = ['Heo', '11010', 'ab']
output = []
for input in inputs:
    output.append(removeChar(input[0], input[1]))

print(expeted_output)
print(output)
assert expeted_output == output
print(expeted_output)
print(output)

"""Q7- Write a program to count the number of vowels in a given string.

"""

vowels = ['a', 'i', 'o', 'u', 'e']

def numVowels(st):
    st = st.lower()
    count = 0
    for c in st:
        if c in vowels: count += 1
    return(count)

inputs = [ 'Hello', '11010', 'abd', 'd', 'HELLO']
expeted_output = [2, 0, 1, 0, 2]
output = []
for input in inputs:
    output.append(numVowels(input))

print(expeted_output)
print(output)
assert expeted_output == output
print(expeted_output)
print(output)

"""Q8- Write a program to get the second highest number in an array of integers.

"""

def secondHighest(lst):
    lst.sort()
    highest = lst[-1]
    for i in lst.__reversed__():
        if i != highest: return(i)
    return(lst[-1])
    #max(lst)
    #lst.remove(max(lst))
    #return(max(lst))

inputs = [ [4, 7, 8, 4, 5, 3], [3, 5, 6], [8, 8, 7], [2]]
expeted_output = [7, 5, 7, 2]
output = []
for input in inputs:
    output.append(secondHighest(input))

print(expeted_output)
print(output)
assert expeted_output == output
print(expeted_output)
print(output)

"""Q9- Write a program to get unique characters in a string."""

def uniqueChars(st):
    return(set(st))

inputs = ['Hello']
expeted_output = [{'H', 'e', 'l', 'o'}]
output = []
for input in inputs:
    output.append(uniqueChars(input))

print(expeted_output)
print(output)
assert expeted_output == output
print(expeted_output)
print(output)

"""Q10- Write to program to find the highest frequency element in a list using a for loop. Ex: Lst = [1,2,2,2,3,3,4,5,7] -> 2

"""

def highestFreq(lst):
    itr = set(lst)
    highest = (lst[0], 1)
    for i in itr:
        if lst.count(i) > highest[1]:
            highest = (i, lst.count(i))
    return(highest[0])

'''    
    dct = dict()
    highest = (lst[0], 1)
    for i in lst:
        if i in dct:
            dct[i] = dct[i] + 1
        else:
            dct[i] = 1
        if dct[i] > highest[1]:
            highest = (i, dct[i])
    return(highest[0])
'''

inputs = [ [4, 7, 7, 4, 7, 3], [3, 5, 6], [8, 8, 7], [2], [1,2,2,2,3,3,4,5,7]]
expeted_output = [7, 3, 8, 2, 2]
output = []
for input in inputs:
    output.append(highestFreq(input))

print(expeted_output)
print(output)
assert expeted_output == output
print(expeted_output)
print(output)

